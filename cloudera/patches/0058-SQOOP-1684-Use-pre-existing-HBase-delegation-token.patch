From c262944c61bbfc8b8822ceeaabe90a81e1c2ff54 Mon Sep 17 00:00:00 2001
From: Jarek Jarcec Cecho <jarcec@apache.org>
Date: Sun, 9 Nov 2014 20:28:35 -0800
Subject: [PATCH 058/101] SQOOP-1684: Use pre-existing HBase delegation token

(Abraham Elmahrek via Jarek Jarcec Cecho)
---
 .../org/apache/sqoop/mapreduce/HBaseImportJob.java |   99 ++++++++++++--------
 1 files changed, 60 insertions(+), 39 deletions(-)

diff --git a/src/java/org/apache/sqoop/mapreduce/HBaseImportJob.java b/src/java/org/apache/sqoop/mapreduce/HBaseImportJob.java
index d10050d..a93114f 100644
--- a/src/java/org/apache/sqoop/mapreduce/HBaseImportJob.java
+++ b/src/java/org/apache/sqoop/mapreduce/HBaseImportJob.java
@@ -120,6 +120,25 @@ protected void configureOutputFormat(Job job, String tableName,
     conf.set(HBasePutProcessor.ROW_KEY_COLUMN_KEY, rowKeyCol);
   }
 
+  /**
+   * Hope for an existing authentication token.
+   * Test with basic metadata operation.
+   * Log exception if credentials exist, otherwise rethrow exception.
+   */
+  private boolean isAuthenticated(HBaseAdmin admin) {
+    try {
+      LOG.info("Checking for previous credentials by performing a metadata query.");
+      admin.tableExists("TEST");
+      LOG.info("Previous authentication credentials detected, so the job will use them.");
+    } catch (IOException e) {
+      LOG.info("No previous credentials found. Will attempt to authenticate.");
+      LOG.debug("Exception found when performing metadata query to check credentials.", e);
+      return false;
+    }
+
+    return true;
+  }
+
   @Override
   /** Create the target HBase table before running the job. */
   protected void jobSetup(Job job) throws IOException, ImportException {
@@ -143,50 +162,52 @@ protected void jobSetup(Job job) throws IOException, ImportException {
 
     HBaseAdmin admin = new HBaseAdmin(conf);
 
-    // Add authentication token to the job if we're running on secure cluster.
-    //
-    // We're currently supporting HBase version 0.90 that do not have security
-    // patches which means that it do not have required methods
-    // "isSecurityEnabled" and "obtainAuthTokenForJob".
-    //
-    // We're using reflection API to see if those methods are available and call
-    // them only if they are present.
-    //
-    // After we will remove support for HBase 0.90 we can simplify the code to
-    // following code fragment:
-    /*
-    try {
-      if (User.isSecurityEnabled()) {
-        User user = User.getCurrent();
-        user.obtainAuthTokenForJob(conf, job);
+    if (!isAuthenticated(admin)) {
+      // Add authentication token to the job if we're running on secure cluster.
+      //
+      // We're currently supporting HBase version 0.90 that do not have security
+      // patches which means that it do not have required methods
+      // "isSecurityEnabled" and "obtainAuthTokenForJob".
+      //
+      // We're using reflection API to see if those methods are available and call
+      // them only if they are present.
+      //
+      // After we will remove support for HBase 0.90 we can simplify the code to
+      // following code fragment:
+      /*
+      try {
+        if (User.isSecurityEnabled()) {
+          User user = User.getCurrent();
+          user.obtainAuthTokenForJob(conf, job);
+        }
+      } catch(InterruptedException ex) {
+        throw new ImportException("Can't get authentication token", ex);
       }
-    } catch(InterruptedException ex) {
-      throw new ImportException("Can't get authentication token", ex);
-    }
-    */
-    try {
-      // Get method isSecurityEnabled
-      Method isHBaseSecurityEnabled = User.class.getMethod(
-          "isHBaseSecurityEnabled", Configuration.class);
+      */
+      try {
+        // Get method isSecurityEnabled
+        Method isHBaseSecurityEnabled = User.class.getMethod(
+            "isHBaseSecurityEnabled", Configuration.class);
 
-      // Get method obtainAuthTokenForJob
-      Method obtainAuthTokenForJob = User.class.getMethod(
-        "obtainAuthTokenForJob", Configuration.class, Job.class);
+        // Get method obtainAuthTokenForJob
+        Method obtainAuthTokenForJob = User.class.getMethod(
+            "obtainAuthTokenForJob", Configuration.class, Job.class);
 
-      // Get current user
-      User user = User.getCurrent();
+        // Get current user
+        User user = User.getCurrent();
 
-      // Obtain security token if needed
-      if ((Boolean)isHBaseSecurityEnabled.invoke(null, conf)) {
-        obtainAuthTokenForJob.invoke(user, conf, job);
+        // Obtain security token if needed
+        if ((Boolean)isHBaseSecurityEnabled.invoke(null, conf)) {
+          obtainAuthTokenForJob.invoke(user, conf, job);
+        }
+      } catch (NoSuchMethodException e) {
+        LOG.info("It seems that we're running on HBase without security"
+            + " additions. Security additions will not be used during this job.");
+      } catch (InvocationTargetException e) {
+        throw new ImportException("Can't get authentication token", e);
+      } catch (IllegalAccessException e) {
+        throw new ImportException("Can't get authentication token", e);
       }
-    } catch (NoSuchMethodException e) {
-      LOG.info("It seems that we're running on HBase without security"
-        + " additions. Security additions will not be used during this job.");
-    } catch (InvocationTargetException e) {
-      throw new ImportException("Can't get authentication token", e);
-    } catch (IllegalAccessException e) {
-      throw new ImportException("Can't get authentication token", e);
     }
 
     // Check to see if the table exists.
-- 
1.7.0.4

